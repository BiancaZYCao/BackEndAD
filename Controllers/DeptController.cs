using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using BackEndAD.Models;
using BackEndAD.ServiceInterface;
using System.Text.RegularExpressions;
using BackEndAD.TempService;
using Microsoft.AspNetCore.Http;
using Org.BouncyCastle.Math.EC.Rfc7748;

//REMINDER: All existing comments generated by BiancaZYCao
//This is an simple example about how to code Web API controller return data result for ReactJS
//
namespace BackEndAD.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DeptController : ControllerBase
    {
        //GET DATA result from SERVICE layer 
        //e.g. here IEmployeeService is an interface do all the stuff related to ENTITY- emp
        //Here we should call fewer service to make code reusable and clean 
        //private IEmployeeService _empService; not used so far 
        private IDepartmentService _deptService;
        private IStoreClerkService _clerkService;
        private IEmailService _emailService;
        
        //CONSTRUCTOR: make sure u build ur service interface in.
        public DeptController(IEmailService emailService,IDepartmentService deptService, IStoreClerkService clerkService)
        {
            _deptService = deptService;
            _clerkService = clerkService;
            _emailService = emailService;
        }

        // CONTROLLER METHODS handling each HTTP get/put/post/request
        #region basic info-DEPT+EMP+CollectionPoint with eager loading example
        // GET: api/Dept
        [HttpGet]
        public async Task<ActionResult<IList<Department>>> GetAllDepartments()
        {
            var result = await _deptService.findAllDepartmentsAsync();
            // if find data then return result else will return a String says Department not found
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                //There are 3 Department alr seeded in DB, so this line should nvr appears. 
                //I put here Just for u to understand the style. :) -Bianca  
                return NotFound("Departments not found.");
        }

        //return dept info by id
        // GET: api/Dept/id (data passing via URL)
        [HttpGet("{id}")]
        public async Task<ActionResult<Department>> GetDepartmentByIdAsync(int id)
        {
            var resultDepartment = await _deptService.findDepartmentByIdAsync(id);
            // if find data then return result else will return a String says Department not found
            if (resultDepartment != null)
                return Ok(resultDepartment);
            else
                return NotFound("Department not found.");
        }

        [HttpGet("allCollectionpt")]
        public async Task<ActionResult<IList<CollectionInfo>>> GetAllCollectionPointforDept()
        {
            var allCollectionPtList = await _deptService.findAllCollectionPointAsync();

            // if find data then return result else will return a String says Department not found
            if (allCollectionPtList != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(allCollectionPtList);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                //There are 3 Department alr seeded in DB, so this line should nvr appears. 
                //I put here Just for u to understand the style. :) -Bianca  
                return NotFound("No collection point found");
        }

        //This Eager Loading can fetch data but cannot transfer into Json properly -Bianca
        [HttpGet("eager")]
        public ActionResult<List<CollectionInfo>> GetAllCollectionInfoEager()
        {
            var resultL = _deptService.findAllDepartmentsAsyncEager();
            var result = new List<CollectionInfo>(){ };
            
            //var result = new List<Int64>() { };
            foreach (Department dept in resultL)
            {
                Console.WriteLine(dept.Collection.lat);
                result.Add(dept.Collection);
             }
            if (result != null)
            {
                var result2 = result.First<CollectionInfo>();
                return Ok(result2);//.First<Department>().Collection.Id);
            }
            else
                return NotFound("Eager No way!");
        }

        [HttpGet("emp")]
        public async Task<ActionResult<IList<Employee>>> GetAllEmployees()
        {
            var allEmployeesList = await _deptService.findAllEmployeesAsync();

            // if find data then return result else will return a String says Department not found
            if (allEmployeesList != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(allEmployeesList);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                //There are 3 Department alr seeded in DB, so this line should nvr appears. 
                //I put here Just for u to understand the style. :) -Bianca  
                return NotFound("Employees not found.");
        }
        #endregion

        #region requisition
        [HttpGet("req")]
        public async Task<ActionResult<IList<Requisition>>> GetAllRequisitions()
        {
            var result = await _deptService.findAllRequsitionsAsync();
            //var result2 = result.First<Requisition>().Employee;
            // if find data then return result else will return a String says Department not found
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                //There are 3 Department alr seeded in DB, so this line should nvr appears. 
                //I put here Just for u to understand the style. :) -Bianca  
                return NotFound("Requisition not found.");
        }
        [HttpGet("requisition/{id}")]
        public async Task<ActionResult<IList<Requisition>>> GetAllRequisitionsByEmpId(int id)
        {
            var result = await _deptService.findAllRequsitionsByEmpIdAsync(id);
            //var result2 = result.First<Requisition>().Employee;
            // if find data then return result else will return a String says Department not found
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                //There are 3 Department alr seeded in DB, so this line should nvr appears. 
                //I put here Just for u to understand the style. :) -Bianca  
                return NotFound("Requisition not found.");
        }
        #endregion

        #region requisition details
        [HttpGet("reqDetails")]
        public async Task<ActionResult<IList<Requisition>>> GetAllRequisitionsDetails()
        {
            var result = await _deptService.findAllRequsitionDetailAsync();
            //var result2 = result.First<Requisition>().Employee;
            // if find data then return result else will return a String says Department not found
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                //There are 3 Department alr seeded in DB, so this line should nvr appears. 
                //I put here Just for u to understand the style. :) -Bianca  
                return NotFound("Requisition Details not found.");
        }

        [HttpPost("getAllItemList")]
        public async Task<ActionResult<List<Requisition>>> getAllItemList([FromBody] Requisition req)
        {
            var result = await _deptService.findAllRequisitionDetailsItemListById(req);
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                return NotFound("Error");
        }
        #endregion

        #region requisition apply
        
        [HttpPost("getItemByDesc")]
        public async Task<ActionResult<Stationery>> getItemByDesc([FromBody] String desc)

        {
            var result = await _deptService.getItemByDesc(desc);
            //Employee employee = await _deptService.findEmployeeByIdAsync(test.session);
            //String str =await _emailService.SendMail(employee.email, "Apply Requisition", "Your requisition form has been successfully sumitted");
            // if find data then return result else will return a String says Department not found
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                //There are 3 Department alr seeded in DB, so this line should nvr appears. 
                //I put here Just for u to understand the style. :) -Bianca  
                return NotFound("Requisition Details not found");
        }

        [HttpPost("ApplyRequisition/{id}")]
        public async Task<ActionResult<IList<RequisitionDetail>>> ApplyRequisition([FromBody] List<RequisitionDetailsApply> requisition, int id)
        {
            Employee employee = await _deptService.findEmployeeByIdAsync(id);
            if (employee.role == "STAFF" || employee.role == "REPRESENTATIVE")
            {
                var result = await _deptService.applyRequisition(requisition, id);
                String str = await _emailService.SendMail(employee.email, "Apply Requisition", "Your requisition form has been successfully sumitted");
                //String str1 = await _emailService.SendMail(employee.email, "Apply Requisition", "");
                if (result != null)
                    return Ok(result);
                else
                    return NotFound("Requisition Details not found");
            }
            else
            {
                return NotFound("Requisition Details not found");
            }
            
            //String str =await _emailService.SendMail(employee=>dept=>head=>delegate, "Apply Requisition", "New requisition pending approval.");
            
        }

        #endregion

        #region Basic info-Stationery
        [HttpGet("stationery")]
        public async Task<ActionResult<IList<Requisition>>> GetAllStationery()
        {
            var result = await _deptService.findAllStationeryAsync();        
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                return NotFound("Stationeries not found.");
        }
        #endregion

        #region Dept-Head/delegate anthorize + DEPT-info
        [HttpGet("deptPendingReq/{id}")]
        public async Task<ActionResult<IList<Requisition>>> GetPendingRequisitionsByDeptId(int id)
        {
	        var allRequisitionsList = await _deptService.findAllRequsitionsAsync();
	        var allEmployeesList = await _deptService.findAllEmployeesAsync();

	        var allPendingRequisitionsList =
	            allRequisitionsList.Where(x => x.status == "Applied");

	        var allEmployeesUnderDeptList = allEmployeesList.Where(x => x.departmentId == id);

            List<Requisition> allPendingRequisitionsUnderDeptList = new List<Requisition>();

            foreach (Requisition requisition in allPendingRequisitionsList)
            {
	            foreach(Employee employee in allEmployeesUnderDeptList)
	            {
		            if (requisition.EmployeeId == employee.Id)
		            {
                        allPendingRequisitionsUnderDeptList.Add(requisition);
		            }
	            }
            }

            if (allPendingRequisitionsUnderDeptList.Any())
		        //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
		        return Ok(allPendingRequisitionsUnderDeptList);
	        else
		        return NotFound("No pending requisition under this department.");
        }

        [HttpGet("deptPendingReqDetail/{id}")]
        public async Task<ActionResult<IList<RequisitionDetail>>> GetPendingRequisitionsDetailByDeptId(int id)
        {
	        var allRequisitionsList = await _deptService.findAllRequsitionsAsync();
	        var allRequisitionsDetailList = await _deptService.findAllRequsitionDetailAsync();
            var allEmployeesList = await _deptService.findAllEmployeesAsync();

	        var allPendingRequisitionsList =
		        allRequisitionsList.Where(x => x.status == "Applied");

	        var allEmployeesUnderDeptList = allEmployeesList.Where(x => x.departmentId == id);

	        List<Requisition> allPendingRequisitionsUnderDeptList = new List<Requisition>();

	        foreach (Requisition requisition in allPendingRequisitionsList)
	        {
		        foreach (Employee employee in allEmployeesUnderDeptList)
		        {
			        if (requisition.EmployeeId == employee.Id)
			        {
				        allPendingRequisitionsUnderDeptList.Add(requisition);
			        }
		        }
	        }

	        List<RequisitionDetail> allPendingRequisitionsDetailUnderDeptList = new List<RequisitionDetail>();
	        
            foreach (RequisitionDetail requisitionDetail in allRequisitionsDetailList)
	        {
		        foreach (Requisition requisition in allPendingRequisitionsUnderDeptList)
		        {
			        if (requisitionDetail.RequisitionId == requisition.Id) 

                    {
                        allPendingRequisitionsDetailUnderDeptList.Add(requisitionDetail);
			        }
		        }
	        }

	        if (allPendingRequisitionsDetailUnderDeptList.Any())
		        //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
		        return Ok(allPendingRequisitionsDetailUnderDeptList);
	        else
		        return NotFound("No pending requisition detail under this department.");
        }
        
        [HttpGet("deptEmp/{id}")]
        public async Task<ActionResult<IList<Employee>>> GetAllEmployeesByDept(int id)
        {
	        var allEmployeesList = await _deptService.findAllEmployeesAsync();
	        var allEmployeesUnderDeptList = allEmployeesList.Where(x => x.departmentId == id);

            if (allEmployeesUnderDeptList.Any())
	            return Ok(allEmployeesUnderDeptList);
	        else
	            return NotFound("Employees not found.");
        }

        [HttpPost("deptDelegate")]
        public Task<ActionResult<Employee>> DeptDelegate(
	        [FromBody] Employee employee)
        {
	        Console.WriteLine("post");
            Console.WriteLine("\nFor Department");
	        Console.WriteLine("Id: " + employee.Id);
	        Console.WriteLine("delgtStartDate: " + employee.name);
	        Console.WriteLine("delgtEndDate: " + employee.password);

	        Console.WriteLine("\nFor Old Delegate");
            Console.WriteLine("Id: " + employee.email);
	        Console.WriteLine("role: " + employee.role);

	        Console.WriteLine("\nFor New Delegate");
	        Console.WriteLine("Id: " + employee.departmentId);
	        Console.WriteLine("role: " + employee.phoneNum);

            Department departmentToUpdate = new Department();
            departmentToUpdate.Id = employee.Id;
            DateTime delgateStartDate = Convert.ToDateTime(employee.name);
            departmentToUpdate.delgtStartDate = delgateStartDate;
            DateTime delegateEndDate = Convert.ToDateTime(employee.password);
            departmentToUpdate.delgtEndDate = delegateEndDate;


            int oldDelegateId = Int32.Parse(employee.email);
            string oldDelegateRole = employee.role;

            int newDelegateId = employee.departmentId;
            string newDelegateRole = employee.phoneNum;

            _deptService.updateDeptDelegate(departmentToUpdate);
            _deptService.updateDeptEmp(oldDelegateId, oldDelegateRole, newDelegateId, newDelegateRole);
            return null;
        }

        [HttpPost("deptDelegate/{id}")]
        public Task<ActionResult<Employee>> DeptDelegateMobile(
            [FromBody] Employee employee,int id)
        {
            Console.WriteLine("post2");
            Console.WriteLine("\nFor Department");
            Console.WriteLine("Id: " + id);
            Console.WriteLine("delgtStartDate: " + employee.name);
            Console.WriteLine("delgtEndDate: " + employee.password);

            Console.WriteLine("\nFor Old Delegate");
            Console.WriteLine("Id: " + employee.email);
            Console.WriteLine("role: " + employee.role);

            Console.WriteLine("\nFor New Delegate");
            Console.WriteLine("Id: " + employee.departmentId);
            Console.WriteLine("role: " + employee.phoneNum);

            Department departmentToUpdate = new Department();
            departmentToUpdate.Id = id;
            DateTime delgateStartDate = Convert.ToDateTime(employee.name);
            departmentToUpdate.delgtStartDate = delgateStartDate;
            DateTime delegateEndDate = Convert.ToDateTime(employee.password);
            departmentToUpdate.delgtEndDate = delegateEndDate;


            int oldDelegateId = Int32.Parse(employee.email);
            string oldDelegateRole = employee.role;

            int newDelegateId = employee.departmentId;
            string newDelegateRole = employee.phoneNum;

            _deptService.updateDeptDelegate(departmentToUpdate);
            _deptService.updateDeptEmp(oldDelegateId, oldDelegateRole, newDelegateId, newDelegateRole);
            return null;
        }






        [HttpPost("deptRevokeDelegate")]
        public Task<ActionResult<Employee>> DeptRevokeDelegate(
	        [FromBody] Employee employee)
        {
	        Console.WriteLine("post");
	        Console.WriteLine("\nFor Department");
	        Console.WriteLine("Id: " + employee.Id);
	        Console.WriteLine("delgtStartDate: " + employee.name);
	        Console.WriteLine("delgtEndDate: " + employee.password);

	        Console.WriteLine("\nFor Old Delegate");
	        Console.WriteLine("Id: " + employee.departmentId);
            Console.WriteLine("role: " + employee.role);

            Department departmentToUpdate = new Department();
            departmentToUpdate.Id = employee.Id;
            DateTime delgateStartDate = Convert.ToDateTime(employee.name);
            departmentToUpdate.delgtStartDate = delgateStartDate;
            DateTime delegateEndDate = Convert.ToDateTime(employee.password);
            departmentToUpdate.delgtEndDate = delegateEndDate;

            _deptService.updateDeptDelegate(departmentToUpdate);
            _deptService.updateDeptEmpRevoke(employee.departmentId, employee.role);

            return null;
        }

        [HttpPost("deptRevokeDelegate/{deptid}/{staffid}")]
        public Task<ActionResult<Employee>> DeptRevokeDelegateMobile(
            int deptid, int staffid)
        {
            
            Department departmentToUpdate = new Department();
            departmentToUpdate.Id = deptid;
            DateTime delgateStartDate = Convert.ToDateTime(null);
            departmentToUpdate.delgtStartDate = delgateStartDate;
            DateTime delegateEndDate = Convert.ToDateTime(null);
            departmentToUpdate.delgtEndDate = delegateEndDate;

            _deptService.updateDeptDelegate(departmentToUpdate);
            _deptService.updateDeptEmpRevoke(staffid, "STAFF");

            return null;
        }



        [HttpPost("deptRepresentative")]
        public Task<ActionResult<Employee>> DeptRepresentative(
	        [FromBody] Employee employee)
        {
	        Console.WriteLine("post");

	        Console.WriteLine("\nFor Old Representative");
	        Console.WriteLine("Id: " + employee.Id);
            Console.WriteLine("role: " + employee.role);

	        Console.WriteLine("\nFor New Representative");
	        Console.WriteLine("Id: " + employee.departmentId);
	        Console.WriteLine("role: " + employee.phoneNum);

            _deptService.updateDeptEmp(employee.Id, employee.role, employee.departmentId, employee.phoneNum);
	        return null;
        }

        [HttpPost("deptCollection")]
        public Task<ActionResult<Department>> DeptCollection(
	        [FromBody] Department department)
        {
	        Console.WriteLine("post");
	        Console.WriteLine(department.Id);
	        Console.WriteLine(department.CollectionId);

	        _deptService.updateDeptCollectionPt(department.Id, department.CollectionId);
	        return null;
        }

        [HttpPost("deptRequisition")]
        public Task<ActionResult<Requisition>> DeptRequisition(
	        [FromBody] Requisition requisition)
        {
	        Console.WriteLine("post");
	        Console.WriteLine(requisition.Id);
	        Console.WriteLine(requisition.dateOfAuthorizing);
            Console.WriteLine(requisition.AuthorizerId);
	        Console.WriteLine(requisition.status);
	        Console.WriteLine(requisition.comment);

            _deptService.updateRequisition(requisition.Id, requisition.dateOfAuthorizing, requisition.AuthorizerId, requisition.status, requisition.comment);
            _deptService.updateRequisitionDetail(requisition.Id, requisition.status);
            return null;
        }
        #endregion

        #region Dept-Rep
        [HttpGet("deptToDeliverReq/{id}")]
        public async Task<ActionResult<IList<Requisition>>> GetToDeliverRequisitionsByDeptId(int id)
        {
            var allRequisitionsList = await _deptService.findAllRequsitionsAsync();
            var allEmployeesList = await _deptService.findAllEmployeesAsync();

            var allToDeliverRequisitionsList =
                allRequisitionsList.Where(x => x.status == "Approved" || x.status == "Partially_Delivered");

            var allEmployeesUnderDeptList = allEmployeesList.Where(x => x.departmentId == id);

            List<Requisition> allToDeliverRequisitionsUnderDeptList = new List<Requisition>();

            foreach (Requisition requisition in allToDeliverRequisitionsList)
            {
                foreach (Employee employee in allEmployeesUnderDeptList)
                {
                    if (requisition.EmployeeId == employee.Id)
                    {
	                    allToDeliverRequisitionsUnderDeptList.Add(requisition);
                    }
                }
            }

            if (allToDeliverRequisitionsUnderDeptList.Any())
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(allToDeliverRequisitionsUnderDeptList);
            else
                return NotFound("No requisition to deliver under this department.");
        }

        [HttpGet("empToDeliverReq/{id}")]
        public async Task<ActionResult<IList<Requisition>>> GetToDeliverRequisitionsByEmpId(int id)
        {
	        var allRequisitionsList = await _deptService.findAllRequsitionsAsync();

	        var allToDeliverRequisitionsList =
		        allRequisitionsList.Where(x => x.status == "Approved" || x.status == "Partially_Delivered");

	        var allToDeliverRequisitionsByEmpList = allToDeliverRequisitionsList.Where(x => x.EmployeeId == id);

	        if (allToDeliverRequisitionsByEmpList.Any())
		        //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
		        return Ok(allToDeliverRequisitionsByEmpList);
	        else
		        return NotFound("No requisition to deliver under this employee.");
        }

        [HttpGet("deptToDeliverReqDetail/{id}")]
        public async Task<ActionResult<IList<RequisitionDetail>>> GetToDeliverRequisitionsDetailByDeptId(int id)
        {
            var allRequisitionsList = await _deptService.findAllRequsitionsAsync();
            var allRequisitionsDetailList = await _deptService.findAllRequsitionDetailAsync();
            var allEmployeesList = await _deptService.findAllEmployeesAsync();

            var allToDeliverRequisitionsList =
	            allRequisitionsList.Where(x => x.status == "Approved" || x.status == "Partially_Delivered");

            var allToDeliverRequisitionsDetailList =
	            allRequisitionsDetailList.Where(x => x.status == "Approved" || x.status == "Partially_Delivered");

            var allEmployeesUnderDeptList = allEmployeesList.Where(x => x.departmentId == id);

            List<Requisition> allToDeliverRequisitionsUnderDeptList = new List<Requisition>();

            foreach (Requisition requisition in allToDeliverRequisitionsList)
            {
                foreach (Employee employee in allEmployeesUnderDeptList)
                {
                    if (requisition.EmployeeId == employee.Id)
                    {
	                    allToDeliverRequisitionsUnderDeptList.Add(requisition);
                    }
                }
            }

            List<RequisitionDetail> allToDeliverRequisitionsDetailUnderDeptList = new List<RequisitionDetail>();

            foreach (RequisitionDetail requisitionDetail in allToDeliverRequisitionsDetailList)
            {
                foreach (Requisition requisition in allToDeliverRequisitionsUnderDeptList)
                {
                    if (requisitionDetail.RequisitionId == requisition.Id)

                    {
	                    allToDeliverRequisitionsDetailUnderDeptList.Add(requisitionDetail);
                    }
                }
            }

            if (allToDeliverRequisitionsDetailUnderDeptList.Any())
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(allToDeliverRequisitionsDetailUnderDeptList);
            else
                return NotFound("No requisition detail to deliver under this department.");
        }

        [HttpGet("nearestDisbursementListByDept/{id}")]
        public async Task<ActionResult<IList<DisbursementList>>> GetNearestDisbursementListByDeptId(int id)
        {
	        var allDisbursement = await _clerkService.findAllDisbursementListAsync();

	        List<DisbursementList> allDisbursementUnderDept =
		        allDisbursement.Where(x => x.DepartmentId == id).ToList();

            List<DateTime> dateList = new List<DateTime>();

            foreach (DisbursementList dist in allDisbursementUnderDept)
            {
	            dateList.Add(dist.date);
            }

            dateList.Sort();

            //below for testing
            //DateTime now = new DateTime(2020, 8, 31, 0, 0, 0);

            DateTime now = DateTime.Now;
            List<DateTime> dateListWithoutHistory = new List<DateTime>();

            foreach (DateTime date in dateList)
            {
	            if (date > now)
	            {
		            dateListWithoutHistory.Add(date);
	            }
            }

            Console.WriteLine(dateListWithoutHistory.First());
            DateTime nearestDisbursementDate = dateListWithoutHistory.First();

            List<DisbursementList> nearestDisbursementList = new List<DisbursementList>();
            foreach (DisbursementList dist in allDisbursementUnderDept)
            {
	            if (dist.date == nearestDisbursementDate)
	            {
		            nearestDisbursementList.Add(dist);
	            }
            }
            
            if (nearestDisbursementList.Any())
		        //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
		        return Ok(nearestDisbursementList);
	        else
		        return NotFound("No disbursement list under this department.");
        }

        [HttpGet("disbursementDetailByDept/{id}")]
        public async Task<ActionResult<IList<DisbursementDetail>>> GetDisbursementDetailByDeptId(int id)
        {
	        var allDisbursementList = await _clerkService.findAllDisbursementListAsync();
            var allDisbursementDetail = await _clerkService.findAllDisbursementDetailAsync();

	        var allDisbursementListUnderDept =
		        allDisbursementList.Where(x => x.DepartmentId == id);

	        List<DisbursementDetail> allDisbursementDetailUnderDept = new List<DisbursementDetail>();

	        foreach (DisbursementDetail disbursementDetail in allDisbursementDetail)
	        {
		        foreach (DisbursementList disbursementList in allDisbursementListUnderDept)
		        {
			        if (disbursementDetail.DisbursementListId == disbursementList.id)
			        {
				        allDisbursementDetailUnderDept.Add(disbursementDetail);
			        }
		        }
	        }

            if (allDisbursementDetailUnderDept.Any())
		        //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
		        return Ok(allDisbursementDetailUnderDept);
	        else
		        return NotFound("No disbursement detail under this department.");
        }

        [HttpPost("confirmDisbursementByDept")]
        public async Task<ActionResult<IList<DisbursementList>>> GetDisbursementDetailByDeptId([FromBody] List<fakeDisbursementDetail> fdd)
        {
            Console.WriteLine(fdd.Count());
            var incoming = fdd;
            var incomingDDiD = fdd.Select(x => x.id);
            var incomingDDDL = fdd.Select(x => x.DisbursementListId);
           
            var allCP = await _clerkService.findAllCollectionPointAsync();
            var allDL = await _clerkService.findAllDisbursementListAsync();
            var currDL = allDL.Where(x => incomingDDDL.Contains(x.id));
            var currDLPt = currDL.Select(x => x.deliveryPoint);
            var currCP = allCP.Where(x => currDLPt.Contains(x.collectionPoint));
            var allDD = await _clerkService.findAllDisbursementDetailAsync();
            var currDD = allDD.Where(x => incomingDDiD.Contains(x.id));
            var allRD = await _clerkService.findAllRequsitionDetailsAsync();

            StockAdjustment SA = new StockAdjustment();
            SA.date = DateTime.Now;
            SA.EmployeeId = currCP.FirstOrDefault().clerkId;
            SA.type = "lost during delivery to";
            _clerkService.saveStockAdjustment(SA);


            foreach (DisbursementDetail dd in currDD)
            {
                foreach (fakeDisbursementDetail fkdd in fdd)
                {
                    if (fkdd.id == dd.id)
                    {
                        if (fkdd.qty != dd.qty)
                        {
                            RequisitionDetail rd = allRD.Where(x => x.Id == fkdd.RequisitionDetailId).FirstOrDefault();
                            rd.rcvQty -= (dd.qty-fkdd.qty);
                            _clerkService.udpateRequisitionDetail(rd);

                            StockAdjustmentDetail SAD = new StockAdjustmentDetail();
                            SAD.stockAdjustmentId = SA.Id;
                            SAD.StationeryId = rd.StationeryId;
                            SAD.discpQty = (dd.qty - fkdd.qty);
                            SAD.comment = "lost during delivery";
                            SAD.Status = "Approved";
                            _clerkService.saveStockAdjustmentDetail(SAD);

                            dd.qty = fkdd.qty;
                            _clerkService.updateDisbursementDetail(dd);
                        }
                        else
                        {
                            RequisitionDetail rd = allRD.Where(x => x.Id == fkdd.RequisitionDetailId).FirstOrDefault();
                            if(rd.rcvQty == rd.reqQty)
                            {
                                rd.status = "Delivered";
                                _clerkService.udpateRequisitionDetail(rd);
                            }else if (rd.reqQty >rd.rcvQty && rd.rcvQty != 0)
                            {
                                rd.status = "Partially_Delivered";
                                _clerkService.udpateRequisitionDetail(rd);
                            }
                        }
                    }
                }
            }

            foreach (DisbursementList dl in currDL)
            {
                dl.status = "delivered";
                _clerkService.updateDisbursementList(dl);
            }
            return null;

        }

        #endregion

        #region read this before starting
        //this not work Sry Idk details, it is weird. -Bianca
        // GET: api/dept/search?name=ComputerScience
        /*
        [HttpGet("search")]
        public ActionResult<Department> Search(string name)
        {
            Regex r = new Regex(@"(?!^)(?=[A-Z])");
            String nameWithSpace = r.Replace(name, "");
            var dept = _deptService.findDepartmentByName(nameWithSpace);
            if (dept == null || name == null)
            {
                return null;
            }
            return dept;
        }*/

        /* We should use async methods here to improve efficiency
         * However, Here is a sample code for sync method -  getDeptById for u to get familiar with
         * public ActionResult<Department> GetDepartmentById(int id)
        {
            return  _deptService.findDepartmentById(id);
            // u also need findDeptById in your service layer and repo layer 
            (DO NOT FORGET INTERFACE and AddScoped<...> for BOTH repo and service)
        }*/
        #endregion

        #region stock Clerk-fulfill req
        [HttpGet("retrieval")]
        public async Task<ActionResult<IList<Requisition>>> GetAllPendingRequisitions()
        {
            var result = await _deptService.findAllRequsitionsAsync();

            var result_filtered = result.Where(x => x.status != "Delivered");
            foreach (var x in result_filtered)
            {
                Console.WriteLine(x.Id);
            }
            var result_filtered2 = result_filtered.Where(x => x.status != "Declined");
            foreach (var x in result_filtered2)
            {
                Console.WriteLine(x.Id);
            }

            if (result_filtered2 != null)
                //convert to json file
                return Ok(result_filtered2);
            else
                //in case there is nothing to process
                return NotFound("No pending requistions.");
        }

        
        #endregion

    }
}