using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using BackEndAD.Models;
using BackEndAD.ServiceInterface;
using BackEndAD.DataContext;

//REMINDER: All existing comments generated by BiancaZYCao
//This is an simple example about how to code Web API controller return data result for ReactJS
//
namespace BackEndAD.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StoreController : ControllerBase
    {

        private IStoreClerkService _clkService;
        private readonly ProjectContext _context;

        public StoreController(ProjectContext context, IStoreClerkService clkService)
        {
            _clkService = clkService;
            _context = context;
        }

        #region Stationery List (Inventory)
        [HttpGet("Stationeries")]
        public async Task<ActionResult<List<Stationery>>> GetAllStationeries()
        {
            var result = await _clkService.findAllStationeriesAsync();
            // if find data then return result else will return a String says Department not found
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                return NotFound("Stationeries not found");
        }

        [HttpGet("Stationeries/{id}")]
        public async Task<ActionResult<Stationery>> GetStationeryByIdAsync(int id)
        {
            var result = await _clkService.findStationeryByIdAsync(id);
            // if find data then return result else will return a String says Department not found
            if (result != null)
                return Ok(result);
            else
                return NotFound("Stationery not found");
        }
        #endregion

        [HttpGet("Suppliers")]
        public async Task<ActionResult<List<Supplier>>> GetAllSuppliers()
        {
            var result = await _clkService.findAllSuppliersAsync();
            if (result != null)
                //Docs says that Ok(...) will AUTO TRANSFER result into JSON Type
                return Ok(result);
            else
                //this help to return a NOTfOUND result, u can customerize the string.
                return NotFound("Suppliers not found");
        }

        [HttpPost("saveSupplier")]
        public async Task<ActionResult<Supplier>> saveSupplier([FromBody] Supplier s)
        {
            Supplier sup = new Supplier()
            {
                supplierCode = s.supplierCode,
                name = s.name,
                contactPerson = s.contactPerson,
                email = s.email,
                phoneNum = s.phoneNum,
                gstRegisNo = s.gstRegisNo,
                fax = s.fax,
                address = s.address,
                priority = s.priority,
            };

             _clkService.saveSupplier(sup);

            return CreatedAtAction(nameof(GetAllSuppliers), new { }, sup);
        }

        [HttpDelete("deleteSupplier/{id}")]
        public async void DeleteSupplier(int id)
        {
            _clkService.deleteSupplier(id);
          
        }

        [HttpPut("updateSupplier/{id}")]
        public async Task<ActionResult<Supplier>> UpdateSupplier(int id)
        {
            _clkService.updateSupplier(id);
            return CreatedAtAction(nameof(GetAllSuppliers), new { }, _clkService.findStationeryByIdAsync(id));

        }

    }
}